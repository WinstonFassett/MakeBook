"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutputContext = void 0;
var inline_1 = require("./inline");
var AutoNumberState = /** @class */ (function () {
    function AutoNumberState(_prev, _isAlpha) {
        this._prev = _prev;
        this._isAlpha = _isAlpha;
        this._next = {};
        this._num = 0;
    }
    AutoNumberState.prototype.inc = function () {
        this._num++;
        this._next = {};
        return this.current();
    };
    AutoNumberState.prototype.current = function (suffix) {
        if (suffix === void 0) { suffix = ""; }
        if (!this._prev)
            return "";
        if (!this._num)
            this._num = 1;
        var cur = this._isAlpha ? String.fromCharCode(64 + this._num) : this._num;
        return this._prev.current(".") + cur + suffix;
    };
    AutoNumberState.prototype.getNextAlpha = function (name) {
        var id = "A" + (name || "default");
        if (!this._next[id]) {
            this._next[id] = new AutoNumberState(this, true);
        }
        return this._next[id];
    };
    AutoNumberState.prototype.getNextNum = function (name) {
        var id = "N" + (name || "default");
        if (!this._next[id]) {
            this._next[id] = new AutoNumberState(this);
        }
        return this._next[id];
    };
    return AutoNumberState;
}());
var OutputContext = /** @class */ (function () {
    function OutputContext(config) {
        this.config = config;
        this._numState = new AutoNumberState();
        this._nextHeadingId = 1;
        this._toc = [];
        this._tocTable = {};
        this._refIds = {};
        this._refsToUpdate = [];
    }
    OutputContext.prototype.getBaseDir = function () {
        return this.config.input.baseDir || "./";
    };
    OutputContext.prototype.getStyleProps = function (style) {
        var styles = this.config.styles;
        if (!styles[style]) {
            throw Error("Style not defined: " + style);
        }
        return styles[style];
    };
    OutputContext.prototype.getHeadingId = function () {
        return this._nextHeadingId++;
    };
    OutputContext.prototype.getMaxTocLevel = function () {
        return this.config.output.tocLevel || 1;
    };
    OutputContext.prototype.mergeDefinitions = function (overrides) {
        if (overrides === void 0) { overrides = {}; }
        return __assign(__assign(__assign({}, this.config.define), this.config.output.info), overrides);
    };
    OutputContext.prototype.addRefId = function (id, text, headingLevel) {
        text = (0, inline_1.flattenText)(text);
        this._refIds[id] = { text: text, headingLevel: headingLevel };
        if (headingLevel >= 1 && headingLevel <= this.getMaxTocLevel()) {
            this._toc.push(id);
        }
    };
    OutputContext.prototype.addRefToUpdate = function (id, refNode) {
        this._refsToUpdate.push({ id: id, refNode: refNode });
        return refNode;
    };
    OutputContext.prototype.updateRefs = function () {
        var _this = this;
        this._refsToUpdate.forEach(function (r) {
            if (!_this._refIds[r.id])
                throw Error("Reference not found: " + r.id);
            r.refNode.text = _this._refIds[r.id].text;
        });
        Object.assign(this._tocTable, this.config.styles.toc);
        this._tocTable.table = {
            widths: this.config.styles.toc.widths,
            body: this._toc.map(function (id) { return [
                {
                    linkToDestination: id,
                    text: _this._refIds[id].text,
                    style: "toc" + _this._refIds[id].headingLevel,
                },
                { pageReference: id, alignment: "right" },
            ]; }),
        };
    };
    OutputContext.prototype.autoNumber = function (pattern) {
        var num = this._numState;
        while (pattern.length) {
            var nextIdx = pattern.indexOf(".") + 1;
            if (pattern[0] === "(") {
                var endIdx = pattern.indexOf(")");
                var name_1 = pattern.slice(1, endIdx > 0 ? endIdx : 1);
                num = num.getNextNum(name_1);
            }
            else if (pattern[0] === "[") {
                var endIdx = pattern.indexOf("]");
                var name_2 = pattern.slice(1, endIdx > 0 ? endIdx : 1);
                num = num.getNextAlpha(name_2);
            }
            if (nextIdx <= 0)
                break;
            pattern = pattern.slice(nextIdx);
        }
        return num.inc() + this.config.output.autonumSuffix;
    };
    OutputContext.prototype.getTOCTable = function () {
        return this._tocTable;
    };
    return OutputContext;
}());
exports.OutputContext = OutputContext;
