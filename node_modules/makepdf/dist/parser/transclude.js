"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseFileRef = void 0;
var glob = __importStar(require("glob"));
var path = __importStar(require("path"));
var inline_1 = require("./inline");
var parse_1 = require("./parse");
function makeImage(p, caption, props) {
    var result = [
        __assign({ image: p, style: "img" }, props),
    ];
    if (caption) {
        result.push({ text: caption, style: "caption" });
    }
    return { stack: result, unbreakable: true };
}
/** Parse a file reference, and optionally the indented content below it */
function parseFileRef(pattern, caption, ctx, indent, props) {
    // find content if indented directly below file reference line
    var innerContent = [];
    var firstInnerIndent = indent + 8;
    while (ctx.hasInput()) {
        var nextLine = ctx.peek();
        if (!nextLine) {
            // skip over completely blank lines
            ctx.shift();
            if (innerContent.length)
                innerContent.push("");
            continue;
        }
        var nextIndent = nextLine.match(/^\s*/)[0].length;
        if (nextIndent <= indent)
            break;
        if (nextIndent < firstInnerIndent)
            firstInnerIndent = nextIndent;
        innerContent.push(ctx.shift());
    }
    innerContent = innerContent.map(function (s) { return s.slice(firstInnerIndent); });
    // expand referenced file path relative to the entry point
    pattern = pattern.trim();
    var isRelative = pattern[0] !== "/";
    var cwd = isRelative ? path.dirname(ctx.fileName) : ctx.output.getBaseDir();
    var files = glob.sync(pattern.replace(/^\//, ""), { cwd: cwd });
    if (!files.length) {
        throw Error("Transclusion file not found: " + pattern);
    }
    // insert one or more files
    var result = [];
    for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
        var fileName = files_1[_i];
        var p = path.resolve(cwd, fileName);
        // insert an image
        if (/(?:\.jpg|\.jpeg|\.png)$/.test(pattern)) {
            if (innerContent.length) {
                caption = (0, inline_1.parseInline)(innerContent.join(" "), ctx);
            }
            else if (typeof caption === "string") {
                caption = (0, inline_1.parseInline)(caption, ctx);
            }
            result.push(makeImage(p, caption, props));
            continue;
        }
        // insert a markdown file
        if (/(?:\.md|\.txt)$/.test(pattern)) {
            result.push.apply(result, (0, parse_1.parseMarkdownFile)(p, ctx.output, {
                content: innerContent.join("\n") || caption,
            }));
            continue;
        }
        // insert the result of a javascript module/function
        if (/(?:\.js)$/.test(pattern)) {
            var r = require(path.resolve(p));
            if (r.default)
                r = r.default;
            if (typeof r === "function") {
                r = r(__assign({ context: ctx.output, content: innerContent.join("\n") || caption }, props));
            }
            if (!Array.isArray(r))
                r = [r];
            result.push.apply(result, r);
            continue;
        }
        // not sure what to do with this file...
        throw Error("Unknown file type: " + pattern);
    }
    return result;
}
exports.parseFileRef = parseFileRef;
